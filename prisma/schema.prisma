// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                         String                      @id @default(uuid())
  year                       Int
  title                      String
  code                       String
  startMonth                 String
  endMonth                   String
  isCurrent                  Boolean?                    @default(false)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  students                   Student[]
  semesterRegistrations      SemesterRegistration[]
  studentEnrolledCourses     StudentEnrolledCourse[]
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]
  studentSemesterPayments    StudentSemesterPayment[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  students          Student[]
  faculties         Faculty[]
  offeredCourseo    OfferedCourse[]

  @@map("academic_departments")
}

model Student {
  id           String   @id @default(uuid())
  studentId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String?
  email        String
  contactNo    Int
  gender       String
  bloodGroup   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicSemester                   AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId                 String
  academicDepartment                 AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId               String
  academicFacultyId                  String
  academicFaculty                    AcademicFaculty                     @relation(fields: [academicFacultyId], references: [id])
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentEnrolledCourses             StudentEnrolledCourse[]
  studentEnrolledCourseMarks         StudentEnrolledCourseMark[]
  studentSemesterPayments            StudentSemesterPayment[]
  studentAcademicInfos               StudentAcademicInfo[]

  @@map("students")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty             AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId           String
  courses                     CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id                          String                       @id @default(uuid())
  roomNumber                  String
  floor                       String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  building                    Building                     @relation(fields: [buildingId], references: [id])
  buildingId                  String
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

// model Course {
//   id                     String                  @id @default(uuid())
//   title                  String
//   code                   String
//   credits                Int                     @default(0)
//   createdAt              DateTime                @default(now())
//   updatedAt              DateTime                @updatedAt
//   preRequisite           CourseToPrerequisite[]  @relation("CourseToPrerequisite")
//   preRequisiteFor        CourseToPrerequisite[]  @relation("PrerequisiteToCourse")
//   faculties              CourseFaculty[]
//   offeredCourses         OfferedCourse[]
//   studentEnrolledCourses StudentEnrolledCourse[]

//   @@map("courses")
// }
model Course {
  id                     String                  @id @default(uuid())
  title                  String
  code                   String
  credits                Int                     @default(0)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  preRequisite           CourseToPrerequisite[]  @relation("CourseToPrerequisite")
  preRequisiteFor        CourseToPrerequisite[]  @relation("PrerequisiteToCourse")
  faculties              CourseFaculty[]
  offeredCourses         OfferedCourse[]
  studentEnrolledCourses StudentEnrolledCourse[]

  @@map("courses")
}

//ei table ta tokhoni tairi hobe jokhon akta course create korar somoy preRequist dibe
model CourseToPrerequisite {
  courseId       String //ei id course create korar por pabo
  preRequisiteId String //ei id amra body te pathabo,etao akta course eri id jeta amara onno course er preRequist hisabe dissi
  course         Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite") // kon course Ta
  preRequiste    Course @relation(fields: [preRequisiteId], references: [id], name: "PrerequisiteToCourse") // preRequist course ta

  @@id([courseId, preRequisiteId]) //eikhane jehetu primary key nai tai [courseId, preRequisiteId] mile primary key
}

//ei table e course assign to faculty(course route e) and faculty assign to course(faculty route e)
model CourseFaculty {
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id        String                      @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  status    SemesterRegistrationStatus?
  minCredit Int                         @default(0)
  maxCredit Int                         @default(0)

  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime
  academicSemesterId                 String
  academicSemester                   AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  offeredCourses                     OfferedCourse[]
  offeredCourseSections              OfferedCourseSection[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  studentSemesterRegistrations       StudentSemesterRegistration[]

  @@map("semester_registrations")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  semesterRegistrationId             String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections              OfferedCourseSection[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                       String        @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int           @default(0)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  offeredCourseId          String
  offeredCourse            OfferedCourse @relation(fields: [offeredCourseId], references: [id])

  semesterRegistrationId             String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]

  @@map("offered_course_sections")
}

model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  offeredCourseId        String
  offeredCourse          OfferedCourse        @relation(fields: [offeredCourseId], references: [id])
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@id([semesterRegistrationId, studentId, offeredCourseId])
  @@map("student_semester_registration_courses")
}

model OfferedCourseClassSchedule {
  id                     String               @id @default(uuid())
  startTime              String
  endTime                String
  dayOfWeek              WeekDays             @default(SATURDAY)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedules")
}

model StudentEnrolledCourse {
  id                         String                       @id @default(uuid())
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  studentId                  String
  student                    Student                      @relation(fields: [studentId], references: [id])
  courseId                   String
  course                     Course                       @relation(fields: [courseId], references: [id])
  academicSemesterId         String
  academicSemester           AcademicSemester             @relation(fields: [academicSemesterId], references: [id])
  grade                      String?
  point                      Float?                       @default(0)
  totalMarks                 Int?                         @default(0)
  status                     StudentEnrolledCourseStatus? @default(ONGOING)
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]

  @@map("student_enrolled_courses")
}

model StudentAcademicInfo {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  studentId            String
  student              Student  @relation(fields: [studentId], references: [id])
  totalCompletedCredit Int?     @default(0)
  cgpa                 Float?   @default(0)

  @@map("student_academic_infos")
}

model StudentEnrolledCourseMark {
  id                      String                @id @default(uuid())
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  studentId               String
  student                 Student               @relation(fields: [studentId], references: [id])
  studentEnrolledCourseId String
  studentEnrolledCourse   StudentEnrolledCourse @relation(fields: [studentEnrolledCourseId], references: [id])
  academicSemesterId      String
  academicSemester        AcademicSemester      @relation(fields: [academicSemesterId], references: [id])
  grade                   String?
  marks                   Int?
  examType                ExamType?             @default(MIDTERM)

  @@map("student_enrolled_course_marks")
}

enum StudentEnrolledCourseStatus {
  ONGOING
  COMPLETED
  WITHDRAWN
}

enum ExamType {
  MIDTERM
  FINAL
}

model StudentSemesterRegistration {
  id                     String               @id @default(uuid())
  isConfirmed            Boolean?             @default(false)
  totalCreditsTaken      Int?                 @default(0)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("student_semester_registrations")
}

enum PaymentStatus {
  PENDING
  PARTIAL_PAID
  FULL_PAID
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

//-----------------------
model StudentSemesterPayment {
  id                 String           @id @default(uuid())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  studentId          String
  student            Student          @relation(fields: [studentId], references: [id])
  academicSemesterId String
  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])

  fullPaymentAmount             Int?                            @default(0)
  partialPaymentAmount          Int?                            @default(0)
  totalDueAmount                Int?                            @default(0)
  totalPaidAmount               Int?                            @default(0)
  paymentStatus                 PaymentStatus?                  @default(PENDING)
  studentSemesterPaymentHistory StudentSemesterPaymentHistory[]

  @@map("student_semester_payments")
}

model StudentSemesterPaymentHistory {
  id                       String                 @id @default(uuid())
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  studentSemesterPayment   StudentSemesterPayment @relation(fields: [studentSemesterPaymentId], references: [id])
  studentSemesterPaymentId String

  transactionId String
  dueAmount     Int            @default(0)
  paidAmount    Int            @default(0)
  paymentMethod PayementMethod @default(ONLINE)
  isPaid        Boolean?       @default(false)

  @@map("student_semester_payament_histories")
}

enum PayementMethod {
  CASH
  ONLINE
}
